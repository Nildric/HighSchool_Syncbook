{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "EventActionController"
    },
    "designerId": "49463ce1-c387-43a7-80e3-b5e4ca537432",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "InitialViewArea",
                "selector": "InitialViewArea_ua"
            },
            "designerId": "e2584970-ae1d-4524-ba3c-ba47d88a8d88"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "AddEventWindow",
                "selector": "AddEventWindow_ua"
            },
            "designerId": "c076cd28-9c89-4992-a360-f3bf0272bbcb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addEventButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "addEventButtonClick",
                "implHandler": [
                    "/*Toolbar Add Event Button*/",
                    "",
                    "// Creazione di una finestra di aggiunta Evento",
                    "var addEventWindow = Ext.create(\"syncbook.view.AddEventWindow\");",
                    "",
                    "// Creazione CurrentDate",
                    "var currentDate = Ext.util.Format.date(new Date(), 'Y-m-d');",
                    "currentDate = currentDate+\"T00:00:00+00:00\";",
                    "",
                    "var varUUID = Ext.create(\"syncbook.model.UuidGenerator\").data.UUID;",
                    "// Creazione di un Evento ausiliario secondo il modello scelto per caricare il Form della finestra di aggiunta del'evento",
                    "var auxiliarNewEvent = Ext.create(\"syncbook.model.EventInformationModel\", {",
                    "    eventName: \"\",",
                    "    eventStart: currentDate,",
                    "    eventStartTime: \"\",",
                    "    eventEnd: currentDate,",
                    "    eventEndTime: \"\",",
                    "    eventDescription: \"\",",
                    "    eventType: \"\",",
                    "    eventLocation: \"\",",
                    "    eventUrl: \"\",",
                    "    UUID: varUUID",
                    "});",
                    "// Carico il Record all'interno della finestra per l'aggiunta dell'evento",
                    "this.getAddEventWindow().getComponent('addEventForm').loadRecord(auxiliarNewEvent);",
                    "// Mostro la finestra al Client",
                    "addEventWindow.show();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "7deb0b9f-c26e-4f20-9866-ff807e8a479e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#addEventSubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "addEventSubmitClick",
                "implHandler": [
                    "/*Submit Button in Add Event Window*/",
                    "",
                    "// Raggiungo il Form.",
                    "var auxiliarForm = this.getAddEventWindow().getComponent('addEventForm').getForm();",
                    "// Estraggo il Record dal Form.",
                    "formRecord = auxiliarForm.getRecord();",
                    "// Aggiorno il Form con il Record appena prelevato.",
                    "auxiliarForm.updateRecord(formRecord);",
                    "// Visualizzo Errori, se presenti.",
                    "auxiliarForm.clearInvalid();",
                    "",
                    "var customValidationOK = auxiliarForm.isValid();",
                    "var formValidationOK = true;",
                    "var canSave = true;",
                    "",
                    "if(formRecord.data.eventStart.getTime()>formRecord.data.eventEnd.getTime())",
                    "{",
                    "    auxiliarForm.markInvalid({'eventStart':'Event Start must be lower than Event End'});",
                    "    auxiliarForm.markInvalid({'eventEnd':'Event End must be higher than Event Start'});",
                    "    customValidationOK = false;",
                    "} else {",
                    "    if(formRecord.data.eventStart.getTime()==formRecord.data.eventEnd.getTime() && formRecord.data.eventStartTime.getTime()>formRecord.data.eventEndTime.getTime())",
                    "    {",
                    "        auxiliarForm.markInvalid({'eventStartTime':'Event Start Time must be lower than Event End Time'});",
                    "        auxiliarForm.markInvalid({'eventEndTime':'Event End Time must be higher than Event Start Time'});",
                    "        customValidationOK = false;",
                    "    }",
                    "}",
                    "",
                    "canSave = (customValidationOK && formValidationOK);",
                    "",
                    "// Verifico la Validità del Form",
                    "if(canSave === true) {",
                    "    // Chiudo la finestra di Aggiunta di un Evento",
                    "    this.getAddEventWindow().close();",
                    "    // Confermo che il Record preso dal Form è stato utilizzato",
                    "    formRecord.setDirty();",
                    "    // Chiamo la funzione ausiliaria per l'aggiunta di un vCalendar all'interno di un Database",
                    "    this.addingEventFunction(formRecord);",
                    "} else {",
                    "    Ext.Msg.show({",
                    "        title: \"Form Error\",",
                    "        msg: \"Uncorrect Form Compilation\",",
                    "        buttons: Ext.Msg.OK,",
                    "        closable: false,",
                    "        scope: this,",
                    "        icon: Ext.window.MessageBox.ERROR",
                    "    });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "d3bceff1-89d2-407d-bd36-5344927ceda2"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "ModEventWindow",
                "selector": "ModEventWindow_ua"
            },
            "designerId": "bf4c3c15-4345-4c1b-8a8d-d9202f18b684"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#modEventButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "modEventButtonClick",
                "implHandler": [
                    "/*Toolbar Mod Event Button*/",
                    "",
                    "// Creo una referenza alla ChooseEventGrid",
                    "var eventGrid = this.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid');",
                    "// Estraggo il Record selezionato nella griglia appena referenziata",
                    "eventGridSelected = eventGrid.getSelectionModel().getSelection();",
                    "",
                    "if(eventGridSelected.length>0) {",
                    "    // Creazione di una finestra di modifica Evento",
                    "    var modEventWindow = Ext.create(\"syncbook.view.ModEventWindow\");",
                    "    // Carico il Record all'interno della finestra per la modifica dell'evento",
                    "    eventGridSelected[0].data.eventStartTime = eventGridSelected[0].data.eventStart;",
                    "    eventGridSelected[0].data.eventEndTime = eventGridSelected[0].data.eventEnd;",
                    "    this.getModEventWindow().getComponent('modEventForm').loadRecord(eventGridSelected[0]);",
                    "    // Mostro la finestra al Client",
                    "    modEventWindow.show();",
                    "} else {",
                    "    Ext.Msg.show({",
                    "        title: \"No Item Selection\",",
                    "        msg: \"Select an Item in the Grid to Proceed with your Action\",",
                    "        buttons: Ext.Msg.OK,",
                    "        closable: false,",
                    "        scope: this,",
                    "        icon: Ext.window.MessageBox.ERROR",
                    "    });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "02d7cc4b-c8c4-4e2b-b556-9d7db2309e31"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#modEventSubmit",
                "designer|targetType": "Ext.button.Button",
                "fn": "modEventSubmitClick",
                "implHandler": [
                    "/*Submit Button in Mod Event Window*/",
                    "",
                    "// Raggiungo il Form.",
                    "var auxiliarForm = this.getModEventWindow().getComponent('modEventForm').getForm();",
                    "// Estraggo il Record dal Form.",
                    "formRecord = auxiliarForm.getRecord();",
                    "// Aggiorno il Form con il Record appena prelevato.",
                    "auxiliarForm.updateRecord(formRecord);",
                    "// Visualizzo Errori, se presenti.",
                    "auxiliarForm.clearInvalid();",
                    "",
                    "var customValidationOK = auxiliarForm.isValid();",
                    "var formValidationOK = true;",
                    "var canSave = true;",
                    "if(formRecord.data.eventStart.getTime()>formRecord.data.eventEnd.getTime())",
                    "{",
                    "    auxiliarForm.markInvalid({'eventStart':'Event Start must be lower than Event End'});",
                    "    auxiliarForm.markInvalid({'eventEnd':'Event End must be higher than Event Start'});",
                    "    customValidationOK = false;",
                    "} else {",
                    "    if(formRecord.data.eventStartTime.getTime()>formRecord.data.eventEndTime.getTime() && formRecord.data.eventStart.getTime()==formRecord.data.eventEnd.getTime())",
                    "    {",
                    "        auxiliarForm.markInvalid({'eventStartTime':'Event Start Time must be lower than Event End Time'});",
                    "        auxiliarForm.markInvalid({'eventEndTime':'Event End Time must be higher than Event Start Time'});",
                    "        customValidationOK = false;",
                    "    }",
                    "}",
                    "",
                    "canSave = (customValidationOK && formValidationOK);",
                    "",
                    "// Verifico la Validità del Form",
                    "if(canSave === true) {",
                    "    // Chiudo la finestra di Modifica di un Evento",
                    "    this.getModEventWindow().close();",
                    "    // Confermo che il Record preso dal Form è stato utilizzato",
                    "    formRecord.setDirty();",
                    "",
                    "    formRecord.data.eventStart.setHours(formRecord.data.eventStartTime.getHours());",
                    "    formRecord.data.eventStart.setMinutes(formRecord.data.eventStartTime.getMinutes());",
                    "    formRecord.data.eventStart.setSeconds(formRecord.data.eventStartTime.getSeconds());",
                    "    formRecord.data.eventEnd.setHours(formRecord.data.eventEndTime.getHours());",
                    "    formRecord.data.eventEnd.setMinutes(formRecord.data.eventEndTime.getMinutes());",
                    "    formRecord.data.eventEnd.setSeconds(formRecord.data.eventEndTime.getSeconds());",
                    "",
                    "    this.moddingEventFunction(formRecord);",
                    "",
                    "    var eventForm = this.getInitialViewArea().getComponent('calendarPanel').getComponent('singleEventForm');",
                    "    eventForm.getForm().loadRecord(formRecord);",
                    "",
                    "    if(formRecord.data.eventName!==\"\") {eventForm.setTitle(\"Event : \"+formRecord.data.eventName);}",
                    "} else {",
                    "    Ext.Msg.show({",
                    "        title: \"Form Error\",",
                    "        msg: \"Uncorrect Form Compilation\",",
                    "        buttons: Ext.Msg.OK,",
                    "        closable: false,",
                    "        scope: this,",
                    "        icon: Ext.window.MessageBox.ERROR",
                    "    });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "4a18a3af-560f-430f-b1e9-de0ad056a1cb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeRecord"
                ],
                "fn": "addingEventFunction",
                "implHandler": [
                    "var mySelf = this;",
                    "",
                    "storeRecord.save({",
                    "    callback : function(records, operation, success) {",
                    "        var operationResult = Ext.decode(operation.response.responseText);",
                    "",
                    "        if(operationResult.events.errorSuccess === false) {",
                    "            console.error(\"An error with code : \"+operationResult.events.errorCode+\" has occoured = \"+operationResult.events.errorDescription);",
                    "        } else {",
                    "            mySelf.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid').store.load();",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "17c8d658-2608-456b-89ef-0a308335fd6f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#deleteEventButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "deleteEventSubmitClick",
                "implHandler": [
                    "/*Toolbar Delete Event Button*/",
                    "",
                    "// Creo una referenza alla ChooseEventGrid",
                    "var eventGrid = this.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid');",
                    "// Estraggo il Record selezionato nella griglia appena referenziata",
                    "eventGridSelected = eventGrid.getSelectionModel().getSelection();",
                    "",
                    "if(eventGridSelected.length>0) {",
                    "    Ext.Msg.show({",
                    "        title: \"Deleting Operation\",",
                    "        msg: \"Are You Sure to Delete the event : \"+eventGridSelected[0].data.eventName+\" ?\",",
                    "        buttons: Ext.Msg.YESNO,",
                    "        closable: false,",
                    "        scope: this,",
                    "        fn: function(btn) {",
                    "            if(btn === 'yes') {",
                    "                this.deletingEventFunction(eventGridSelected[0]);",
                    "                this.getInitialViewArea().getComponent('calendarPanel').getComponent('singleEventForm').getForm().reset();",
                    "                this.getInitialViewArea().getComponent('calendarPanel').getComponent('singleEventForm').setTitle(\"Event Information\");",
                    "            }",
                    "        },",
                    "        icon: Ext.window.MessageBox.QUESTION",
                    "    });",
                    "} else {",
                    "    Ext.Msg.show({",
                    "        title: \"No Item Selection\",",
                    "        msg: \"Select an Item in the Grid to Proceed with your Action\",",
                    "        buttons: Ext.Msg.OK,",
                    "        closable: false,",
                    "        scope: this,",
                    "        icon: Ext.window.MessageBox.ERROR",
                    "    });",
                    "}"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "87202cba-4acf-40dd-9ecf-338256bfe252"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeRecord"
                ],
                "fn": "moddingEventFunction",
                "implHandler": [
                    "var mySelf= this;",
                    "",
                    "storeRecord.save({",
                    "    callback : function(records, operation, success) {",
                    "        var operationResult = Ext.decode(operation.response.responseText);",
                    "",
                    "        if(operationResult.events.errorSuccess === false) {",
                    "            console.error(\"An error with code : \"+operationResult.events.errorCode+\" has occoured = \"+operationResult.events.errorDescription);",
                    "        } else {",
                    "            mySelf.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid').store.load();",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "92bf2fae-927b-4c70-ba2c-4d7250e2a393"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeRecord"
                ],
                "fn": "deletingEventFunction",
                "implHandler": [
                    "var mySelf= this;",
                    "",
                    "storeRecord.destroy({",
                    "    callback : function(records, operation, success) {",
                    "        var operationResult = Ext.decode(operation.response.responseText);",
                    "",
                    "        if(operationResult.events.errorSuccess === false) {",
                    "            console.error(\"An error with code : \"+operationResult.events.errorCode+\" has occoured = \"+operationResult.events.errorDescription);",
                    "        } else {",
                    "            mySelf.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid').store.load();",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "designerId": "7cd04dc5-f82e-4b4e-8091-4fc221f272aa"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#syncEventButton",
                "designer|targetType": "Ext.button.Button",
                "fn": "syncEventButtonClick",
                "implHandler": [
                    "this.syncEventsFunction();"
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "55c08a2c-873a-4c46-8105-6b1ef01e9094"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "syncEventsFunction",
                "implHandler": [
                    "var mySelf = this;",
                    "",
                    "Ext.Ajax.request({",
                    "    url: \"resources/libraries/syncbookServices/syncService.php\",",
                    "    params: {",
                    "        syncEvents : \"syncEvents\"",
                    "    },",
                    "",
                    "    success: function(response) {",
                    "        var operationResult = Ext.decode(response.responseText);",
                    "        if(operationResult.events.errorSuccess === false) {",
                    "            console.error(\"An error with code : \"+operationResult.events.errorCode+\" has occoured = \"+operationResult.events.errorDescription);",
                    "        } else {",
                    "            mySelf.getInitialViewArea().getComponent('calendarPanel').getComponent('chooseEventGrid').store.load();",
                    "        }",
                    "    },",
                    "",
                    "    failure: function(response) {",
                    "        Ext.Msg.show({",
                    "            title: \"Response Error\",",
                    "            msg: \"Response Error Message\",",
                    "            buttons: Ext.Msg.OK,",
                    "            closable: false,",
                    "            scope: this,",
                    "            icon: Ext.window.MessageBox.ERROR",
                    "        });",
                    "    }",
                    "});"
                ]
            },
            "designerId": "9c43f56d-eae8-4a5b-ac07-3785b646a84b"
        }
    ]
}