/*
 * File: app/controller/ContactOptionController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('syncbook.controller.ContactOptionController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'ModContactOptionWindow',
            selector: 'ModContactOptionWindow_ua'
        }
    ],

    optionsContactClick: function(button, e, eOpts) {
        this.contactOptionButton();
    },

    modContactOptionSubmitClick: function(button, e, eOpts) {
        if(syncTaskContact === null) {
            this.taskFunction();
        } else {
            syncTaskContact.stop();
        }

        this.contactOptionSubmitButton();
    },

    viewportBeforeRender: function(component, eOpts) {
        this.taskFunction();
    },

    contactOptionButton: function() {
        var mySelf = this;

        Ext.Ajax.request({
            url: "resources/libraries/syncbookServices/optionService.php",
            params: {
                syncType: "carddav"
            },

            success: function(response) {
                var operationResult = Ext.decode(response.responseText);

                if(operationResult.option.errorSuccess != 'undefined' && operationResult.option.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.option.errorCode+" has occoured = "+operationResult.option.errorDescription);
                } else {
                    var modContactOptionWindow = Ext.create("syncbook.view.ModContactOptionWindow");

                    if(operationResult.option.syncflag*1 === 0) {
                        mySelf.getModContactOptionWindow().getComponent('modContactOptionForm').getForm().findField('synctime').setDisabled(true);
                    }

                    var toLoadSyncRecord = Ext.create("syncbook.model.SyncModel", {
                        synctype: operationResult.option.synctype,
                        syncflag: operationResult.option.syncflag*1,
                        synctime: operationResult.option.synctime
                    });

                    mySelf.getModContactOptionWindow().getComponent('modContactOptionForm').loadRecord(toLoadSyncRecord);
                    modContactOptionWindow.show();
                }
            },

            failure: function(response) {
                Ext.Msg.show({
                    title: "Response Error",
                    msg: "Response Error Message",
                    buttons: Ext.Msg.OK,
                    closable: false,
                    scope: this,
                    icon: Ext.window.MessageBox.ERROR
                });
            }
        });
    },

    contactOptionSubmitButton: function() {
        var mySelf = this;

        var auxiliarForm = mySelf.getModContactOptionWindow().getComponent('modContactOptionForm').getForm();
        formRecord = auxiliarForm.getRecord();
        auxiliarForm.updateRecord(formRecord);
        auxiliarForm.clearInvalid();

        if(auxiliarForm.isValid()) {
            mySelf.getModContactOptionWindow().close();
            formRecord.setDirty();

            Ext.Ajax.request({
                url: "resources/libraries/syncbookServices/optionService.php",
                params: {
                    syncType: "carddav",
                    newSyncOption: Ext.encode(formRecord.data)
                },

                success: function(response) {
                    var operationResult = Ext.decode(response.responseText);

                    if(operationResult.option.errorSuccess != 'undefined' && operationResult.option.errorSuccess === false) {
                        console.error("An error with code : "+operationResult.option.errorCode+" has occoured = "+operationResult.option.errorDescription);
                    } else {
                        mySelf.taskFunction();
                    }
                },

                failure: function(response) {
                    Ext.Msg.show({
                        title: "Response Error",
                        msg: "Response Error Message",
                        buttons: Ext.Msg.OK,
                        closable: false,
                        scope: this,
                        icon: Ext.window.MessageBox.ERROR
                    });
                }
            });
        } else {
            Ext.Msg.show({
                title: "Form Error",
                msg: "Uncorrect Form Compilation",
                buttons: Ext.Msg.OK,
                closable: false,
                scope: this,
                icon: Ext.window.MessageBox.ERROR
            });
        }
    },

    taskFunction: function() {
        Ext.Ajax.request({
            url: "resources/libraries/syncbookServices/optionService.php",
            params: {
                syncType: "carddav"
            },

            success: function(response) {
                var operationResult = Ext.decode(response.responseText);

                if(operationResult.option.errorSuccess != 'undefined' && operationResult.option.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.option.errorCode+" has occoured = "+operationResult.option.errorDescription);
                } else {

                    if(operationResult.option.syncflag*1 == 1) {
                        var runner = new Ext.util.TaskRunner();

                        syncTaskContact = runner.newTask({
                            run: function () {
                                // console.log("Timestamp Contact : ", Ext.util.Format.date(new Date(), 'H:i:s'));
                                syncbook.app.getController('ContactActionController').syncContactsFunction();
                            },

                            interval: operationResult.option.synctime*1000
                        });

                        syncTaskContact.start();
                    } else {
                        if(syncTaskContact !== null)
                            syncTaskContact.stop();
                    }
                }
            },

            failure: function(response) {
                Ext.Msg.show({
                    title: "Response Error",
                    msg: "Response Error Message",
                    buttons: Ext.Msg.OK,
                    closable: false,
                    scope: this,
                    icon: Ext.window.MessageBox.ERROR
                });
            }
        });
    },

    init: function(application) {
        this.control({
            "#optionsContact": {
                click: this.optionsContactClick
            },
            "#modContactOptionSubmit": {
                click: this.modContactOptionSubmitClick
            },
            "#myviewport": {
                beforerender: this.viewportBeforeRender
            }
        });
    }

});
