/*
 * File: app/controller/ContactActionController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('syncbook.controller.ContactActionController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'AddContactWindow',
            selector: 'AddContactWindow_ua'
        },
        {
            ref: 'ModContactWindow',
            selector: 'ModContactWindow_ua'
        },
        {
            ref: 'InitialViewArea',
            selector: 'InitialViewArea_ua'
        }
    ],

    addContactButtonClick: function(button, e, eOpts) {
        /*Toolbar Add Contact Button*/

        // Creazione di una finestra di aggiunta Contatto
        var addContactWindow = Ext.create("syncbook.view.AddContactWindow");

        var varUUID = Ext.create("syncbook.model.UuidGenerator").data.UUID;
        // Creazione di un contatto ausiliario secondo il modello scelto per caricare il Form della finestra di aggiunta del contatto
        var auxiliarNewContact = Ext.create("syncbook.model.ContactInformationModel", {
            contactColor: "",
            contactGroup: "",
            contactType: "",
            contactImage: "",
            contactSurname: "",
            contactUsername: "",
            contactName: "",
            contactEMail: "",
            contactPhoneNumber: "",
            contactMobileNumber: "",
            contactFax: "",
            contactAddress: "",
            contactWeb: "",
            contactPartitaIva: "",
            contactCodiceFiscale: "",
            contactFacebook: "",
            contactTwitter: "",
            contactInstagram: "",
            contactGoogle: "",
            contactLinkedin: "",
            contactSkype: "",
            UUID: varUUID
        });
        // Carico il Record all'interno della finestra per l'aggiunta del contatto
        this.getAddContactWindow().getComponent('addContactForm').loadRecord(auxiliarNewContact);
        // Mostro la finestra al Client
        addContactWindow.show();
    },

    addContactSubmitClick: function(button, e, eOpts) {
        /*Submit Button in Add Contact Window*/

        // Raggiungo il Form.
        var auxiliarForm = this.getAddContactWindow().getComponent('addContactForm').getForm();
        // Estraggo il Record dal Form.
        formRecord = auxiliarForm.getRecord();
        // Aggiorno il Form con il Record appena prelevato.
        auxiliarForm.updateRecord(formRecord);
        // Visualizzo Errori, se presenti.
        auxiliarForm.clearInvalid();

        // Verifico la Validità del Form
        if(auxiliarForm.isValid()) {
            // Chiudo la finestra di Aggiunta di un Contatto
            this.getAddContactWindow().close();
            // Confermo che il Record preso dal Form è stato utilizzato
            formRecord.setDirty();
            //Chiamo la funzione ausiliaria per l'aggiunta di un contatto all'interno di un database
            this.addingContactFunction(formRecord);
        } else {
            Ext.Msg.show({
                title: "Form Error",
                msg: "Uncorrect Form Compilation",
                buttons: Ext.Msg.OK,
                closable: false,
                scope: this,
                icon: Ext.window.MessageBox.ERROR
            });
        }
    },

    modContactButtonClick: function(button, e, eOpts) {
        /*Toolbar Mod Contact Button*/

        // Creo una referenza alla ChooseContactGrid
        var contactGrid = this.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid');
        // Estraggo il Record selezionato nella griglia appena referenziata
        contactGridSelected = contactGrid.getSelectionModel().getSelection();

        if(contactGridSelected.length>0) {
            // Creazione di una finestra di modifica Contatto
            var modContactWindow = Ext.create("syncbook.view.ModContactWindow");
            // Carico il Record all'interno della finestra per la modifica del contatto
            this.getModContactWindow().getComponent('modContactForm').loadRecord(contactGridSelected[0]);
            // Mostro la finestra al Client
            modContactWindow.show();
        } else {
            Ext.Msg.show({
                title: "No Item Selection",
                msg: "Select an Item in the Grid to Proceed with your Action",
                buttons: Ext.Msg.OK,
                closable: false,
                scope: this,
                icon: Ext.window.MessageBox.ERROR
            });
        }
    },

    modContactSubmitClick: function(button, e, eOpts) {
        /*Submit Button in Mod Contact Window*/

        // Raggiungo il Form.
        var auxiliarForm = this.getModContactWindow().getComponent('modContactForm').getForm();
        // Estraggo il Record dal Form.
        formRecord = auxiliarForm.getRecord();
        // Aggiorno il Form con il Record appena prelevato.
        auxiliarForm.updateRecord(formRecord);
        // Visualizzo Errori, se presenti.
        auxiliarForm.clearInvalid();

        // Verifico la Validità del Form
        if(auxiliarForm.isValid()) {
            // Chiudo la finestra di Modifica di un Contatto
            this.getModContactWindow().close();
            // Confermo che il Record preso dal Form è stato utilizzato
            formRecord.setDirty();

            // Chiamo la funzione ausiliaria per la modifica di un Contatto all'interno di un Database
            this.moddingContactFunction(formRecord);

            var contactForm = this.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('singleContactForm');
            contactForm.getForm().loadRecord(formRecord);

            if(formRecord.data.contactUsername!=="") {
                contactForm.setTitle("Contact : "+formRecord.data.contactName+" - "+formRecord.data.contactUsername+" - "+formRecord.data.contactSurname);
            } else {
                contactForm.setTitle("Contact : "+formRecord.data.contactName+" - "+formRecord.data.contactSurname);
            }
            contactForm.getComponent('contactImage').setSrc(formRecord.data.contactImage);
        } else {
            Ext.Msg.show({
                title: "Form Error",
                msg: "Uncorrect Form Compilation",
                buttons: Ext.Msg.OK,
                closable: false,
                scope: this,
                icon: Ext.window.MessageBox.ERROR
            });
        }
    },

    deleteContactSubmitClick: function(button, e, eOpts) {
        /*Toolbar Delete Contact Button*/

        // Creo una referenza alla ChooseContactGrid
        var contactGrid = this.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid');
        // Estraggo il Record selezionato nella griglia appena referenziata
        var contactGridSelected = contactGrid.getSelectionModel().getSelection();

        if(contactGridSelected.length>0) {
            Ext.Msg.show({
                title: "Deleting Operation",
                msg: "Are You Sure to Delete the contact : "+contactGridSelected[0].data.contactSurname+" "+contactGridSelected[0].data.contactName+" ?",
                buttons: Ext.Msg.YESNO,
                closable: false,
                scope: this,
                fn: function(btn) {
                    if(btn === 'yes') {
                        this.deletingContactFunction(contactGridSelected[0]);

                        this.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('singleContactForm').getForm().reset();
                        this.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('singleContactForm').setTitle("Contact Information");
                    }
                },
                icon: Ext.window.MessageBox.QUESTION
            });
        } else {
            Ext.Msg.show({
                title: "No Item Selection",
                msg: "Select an Item in the Grid to Proceed with your Action",
                buttons: Ext.Msg.OK,
                closable: false,
                scope: this,
                icon: Ext.window.MessageBox.ERROR
            });
        }
    },

    syncContactButtonClick: function(button, e, eOpts) {
        this.syncContactsFunction();
    },

    addingContactFunction: function(storeRecord) {
        var mySelf = this;

        storeRecord.save({
            callback : function(records, operation, success) {
                var operationResult = Ext.decode(operation.response.responseText);

                if(operationResult.contacts.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.contacts.errorCode+" has occoured = "+operationResult.contacts.errorDescription);
                } else {
                    mySelf.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid').store.load();
                }
            }
        });
    },

    moddingContactFunction: function(storeRecord) {
        mySelf = this;

        storeRecord.save({
            callback : function(records, operation, success) {
                var operationResult = Ext.decode(operation.response.responseText);

                if(operationResult.contacts.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.contacts.errorCode+" has occoured = "+operationResult.contacts.errorDescription);
                } else {
                    mySelf.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid').store.load();
                }
            }
        });
    },

    deletingContactFunction: function(storeRecord) {
        var mySelf = this;

        storeRecord.destroy({
            callback : function(records, operation, success) {
                var operationResult = Ext.decode(operation.response.responseText);

                if(operationResult.contacts.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.contacts.errorCode+" has occoured = "+operationResult.contacts.errorDescription);
                } else {
                    mySelf.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid').store.load();
                }
            }
        });
    },

    syncContactsFunction: function() {
        var mySelf = this;

        Ext.Ajax.request({
            url: "resources/libraries/syncbookServices/syncService.php",
            params: {
                syncContacts : "syncContacts"
            },

            success: function(response) {
                var operationResult = Ext.decode(response.responseText);
                if(operationResult.contacts.errorSuccess === false) {
                    console.error("An error with code : "+operationResult.contacts.errorCode+" has occoured = "+operationResult.contacts.errorDescription);
                } else {
                    mySelf.getInitialViewArea().getComponent('groupTabbedPane').getComponent('groupName').getComponent('chooseContactGrid').store.load();
                }
            },

            failure: function(response) {
                Ext.Msg.show({
                    title: "Response Error",
                    msg: "Response Error Message",
                    buttons: Ext.Msg.OK,
                    closable: false,
                    scope: this,
                    icon: Ext.window.MessageBox.ERROR
                });
            }
        });
    },

    init: function(application) {
        this.control({
            "#addContactButton": {
                click: this.addContactButtonClick
            },
            "#addContactSubmit": {
                click: this.addContactSubmitClick
            },
            "#modContactButton": {
                click: this.modContactButtonClick
            },
            "#modContactSubmit": {
                click: this.modContactSubmitClick
            },
            "#deleteContactButton": {
                click: this.deleteContactSubmitClick
            },
            "#syncContactButton": {
                click: this.syncContactButtonClick
            }
        });
    }

});
