/*
 * File: app/view/ModEventOptionWindow.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('syncbook.view.ModEventOptionWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.ModEventOptionWindow_ua',

    requires: [
        'Ext.form.Panel',
        'Ext.button.Button',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Number'
    ],

    height: 180,
    itemId: 'modEventOptionWindow',
    width: 280,
    autoScroll: true,
    layout: 'absolute',
    title: 'Mod Event Options Window',
    titleAlign: 'center',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'form',
                    border: false,
                    itemId: 'modEventOptionForm',
                    minHeight: 50,
                    minWidth: 50,
                    autoScroll: true,
                    layout: 'absolute',
                    frameHeader: false,
                    titleAlign: 'center',
                    method: 'POST',
                    waitTitle: 'Loading...',
                    items: [
                        {
                            xtype: 'button',
                            x: 190,
                            y: 100,
                            itemId: 'modEventOptionSubmit',
                            text: 'Submit'
                        },
                        {
                            xtype: 'checkboxfield',
                            x: 20,
                            y: 10,
                            frame: false,
                            itemId: 'syncCheckbox',
                            name: 'syncflag',
                            boxLabel: 'Automatic Synchronization',
                            boxLabelAlign: 'before',
                            listeners: {
                                change: {
                                    fn: me.onSyncCheckboxChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'numberfield',
                            x: 20,
                            y: 50,
                            cls: 'textFieldCSS',
                            itemId: 'syncTimeField',
                            fieldLabel: 'Synchronization Time',
                            labelAlign: 'top',
                            labelCls: 'x-form-item-label, styleSincbook',
                            labelSeparator: ' ',
                            name: 'synctime',
                            fieldCls: 'x-form-field textFieldCSS',
                            allowBlank: false,
                            emptyCls: 'x-form-empty-field;',
                            emptyText: 'Seconds',
                            allowDecimals: false,
                            allowExponential: false,
                            minValue: 10,
                            step: 5
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onSyncCheckboxChange: function(field, newValue, oldValue, eOpts) {
        if(newValue === true) {
            this.getComponent('modEventOptionForm').getForm().findField('synctime').setDisabled(false);
        } else {
            this.getComponent('modEventOptionForm').getForm().findField('synctime').setDisabled(true);
        }
    }

});